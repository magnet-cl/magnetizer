---
- hosts: localhost
  vars:
    do_access_token: "{{ lookup('env', 'DIGITALOCEAN_ACCESS_TOKEN') }}"

  tasks:
    - name: check if digital ocean token env var is set
      assert:
        that: "lookup('env', 'DIGITALOCEAN_ACCESS_TOKEN')"
        fail_msg: "DIGITALOCEAN_ACCESS_TOKEN must be set"

    - name: gather digital ocean account info
      digital_ocean_account_info:
        oauth_token: "{{ do_access_token }}"
      register: account_info

    - name: print account info
      debug:
        var: account_info

    - name: gather ssh keys facts from digital ocean
      digital_ocean_sshkey_info:
        oauth_token: "{{ do_access_token }}"
      register: ssh_keys

    - name: register ssh key ids
      command: "echo {{ item }}"
      loop: "{{ ssh_keys.data | json_query('[*].id') }}"
      register: registered_keys
      changed_when: "registered_keys is defined"

    - name: create droplet
      digital_ocean_droplet:
        state: present
        name: "{{ hostname | mandatory }}"
        size: "{{ do_size | default('s-1vcpu-1gb') }}"
        region: "{{ do_region | default('nyc3') }}"
        image: "{{ do_image | default('ubuntu-22-04-x64') }}"
        ssh_keys: "{{ ssh_keys_ids }}"
        monitoring: yes
        unique_name: yes
        wait_timeout: 500
        oauth_token: "{{ do_access_token }}"
      vars:
        ssh_keys_ids: "{{ registered_keys.results | json_query('[*].item') }}"
      register: created_droplet

    - name: print droplet id and ip
      debug:
        msg:
          - "droplet id: {{ created_droplet.data.droplet.id }}"
          - "droplet ip: {{ created_droplet.data.ip_address }}"

    - name: register hostname in Digital Ocean DNS with doctl
      command:
        argv:
          - doctl
          - compute
          - domain
          - records
          - create
          - --record-type
          - A
          - --record-name
          - "{{ hostname.split('.')[0] }}"
          - --record-data
          - "{{ created_droplet.data.ip_address }}"
          - --record-ttl
          - 3600
          - "{{ do_base_domain | default('do.magnet.cl') }}"
      register: result
      changed_when: result.rc == 0

    - name: suggest vps init command
      debug:
        msg:
          - "Once the DNS propagates, the vps init playbook can be run using
            host_list as inventory plugin:"
          - "ansible-playbook -i root@{{ hostname }}, -l root@{{ hostname }} playbooks/vps_init.yml"
