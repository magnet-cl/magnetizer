---
- name: add python-apt (package_facts dependency on Ubuntu)
  apt:
    name: python-apt
    state: present
  become: yes
  when: ansible_distribution == "Ubuntu"
  tags:
    - certbot

- name: gather package facts to check if nginx is installed
  package_facts:
    manager: auto

- name: install certbot and nginx plugin
  apt:
    name:
      - certbot
      - python3-certbot-nginx
  become: yes
  when:
    - "'nginx' in ansible_facts.packages"
    -  ansible_distribution == "Ubuntu"
  tags:
    - certbot

- name: generate certificate for the current host through the nginx plugin
  command:
    argv:
      - certbot
      - --nginx
      - --non-interactive
      - --agree-tos
      - --redirect
      - -m {{ certbot_admin_email }}
      - -d {{ certbot_domain | default(ansible_host.split('@') | last) }}
      - --expand
  become: yes
  when: "'nginx' in ansible_facts.packages"
  tags:
    - certbot

- name: register first domain given as fact
  set_fact:
    first_certbot_domain: "{{ certbot_domain.split(',')[0] }}"

- name: register enabled sites
  find:
    paths: /etc/nginx/sites-enabled
    file_type: any
    # contains works only with file as file_type
    # contains: ".*server_name {{ first_certbot_domain }}.*"
  register: enabled_sites

- name: set 444 as response on unknown server names
  blockinfile:
    path: "{{ item.path }}"
    insertbefore: "BOF"
    marker: "# {mark} ANSIBLE MANAGED BLOCK (magnetizer)"
    block: |
      server {
        server_name _;

        listen 443;
        ssl_certificate /etc/letsencrypt/live/{{ first_certbot_domain }}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{{ first_certbot_domain }}/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        return 444;
      }
  loop: "{{ enabled_sites.files }}"
  become: yes
  when: ansible_distribution == "Ubuntu"

- name: secure nginx
  include_tasks: security.yml
  when: "'nginx' in ansible_facts.packages"
  tags:
    - certbot
